- name: Azure | Manage Resource Group
  azure_rm_resourcegroup:
    state: "{{ state }}"
    name: "{{ rg }}"
    location: "{{ location }}"

- name: Azure | Import azure_deploy_vnet.yml
  include_tasks: azure_deploy_vnet.yml

- name: Azure | Import azure_deploy_nsg.yml
  include_tasks: azure_deploy_nsg.yml



# Public IPS
- name: Azure | Manage Master Public IP
  azure_rm_publicipaddress:
    resource_group: "{{ rg }}"
    state: "{{ state }}"
    name: masterPublicIP
    domain_name_label: "{{ rg_label }}"
    allocation_method: Static
  register: master_lb_ip
  when: master_lb_private_ip is not defined

# The two set_fact tasks have to be inside the blocks, they cannot be
# merged. The router_lb_ip register variable is set (and overwritten)
# even when the "when" condition is false.
- block:
    - name: Azure | Manage Router Public IP without DNS label
      azure_rm_publicipaddress:
        resource_group: "{{ rg }}"
        state: "{{ state }}"
        name: routerPublicIP
        allocation_method: Static
      register: router_lb_ip1

    - set_fact:
        router_lb_ip: "{{ router_lb_ip1.state.ip_address }}"
  when: router_lb_dns_label is not defined

- block:
    - name: Azure | Manage Router Public IP with DNS label
      azure_rm_publicipaddress:
        resource_group: "{{ rg }}"
        state: "{{ state }}"
        name: routerPublicIP
        allocation_method: Static
        domain_name_label: "{{ router_lb_dns_label }}"
      register: router_lb_ip2

    - set_fact:
        router_lb_ip: "{{ router_lb_ip2.state.ip_address }}"
  when: router_lb_dns_label is defined

# Makes this idompotent,  will fail normally since
# domain_name_label is attached to bastion-VMNic
- name: Azure | Check for existing BastionFQDN
  shell: az network public-ip show -n bastionExternalIP -g {{ rg }}  --query dnsSettings.fqdn
  register: bastion_fqdn
  ignore_errors: true

- name: Azure | Manage Bastion Public IP
  azure_rm_publicipaddress:
    resource_group: "{{ rg }}"
    name: bastionExternalIP
    domain_name_label: "{{ rg_label }}b"
    allocation_method: Static
  register: bastion_public_ip
  when: bastion_fqdn.stdout == ''

- name: Azure | Manage Bastion Public IP
  azure_rm_publicipaddress:
    resource_group: "{{ rg }}"
    state: "{{ state }}"
    name: bastionExternalIP
    domain_name_label: "{{ rg_label }}b"
    allocation_method: Static
  register: bastion_public_ip

# LBs
- name: Azure | Manage public Master LB
  azure_rm_loadbalancer:
    name: ocpMasterLB
    location: "{{ location }}"
    resource_group: "{{ rg }}"
    frontend_ip_configurations:
      - name: masterApiFrontend
        public_ip_address: masterPublicIP
    backend_address_pools:
      - name: masterAPIBackend
    probes:
      - name: masterHealthProbe
        port: "{{ api_port }}"
        protocol: Tcp
    load_balancing_rules:
      - name: ocpApiHealth
        frontend_ip_configuration: masterApiFrontend
        backend_address_pool: masterAPIBackend
        probe: masterHealthProbe
        protocol: Tcp
        frontend_port: "{{ api_port }}"
        backend_port: "{{ api_port }}"
        load_distribution: SourceIPProtocol
  when: master_lb_private_ip is not defined

# As of Ansible 2.5, the azure_rm_loadbalancer has no support for
# creating an internal Azure load balancer. Use the Azure CLI instead.
- name: Azure | Manage private Master LB
  block:
    - name: Azure | Create private Master LB
      command: >
        az network lb create
          --resource-group {{ rg }}
          --name ocpMasterLB
          --location {{ location }}
          --frontend-ip-name masterApiFrontend
          --private-ip-address {{ master_lb_private_ip }}
          --vnet-name {{ vnet_customer_managed_vnet_id if vnet_customer_managed | default(false) | bool else vnet_name }}
          --subnet {{ vnet_customer_managed_master_subnet_id if vnet_customer_managed | default(false) | bool else 'master_subnet' }}
          --public-ip-address ''
          --backend-pool-name masterAPIBackend

    - name: Azure | Create private Master LB probe
      command: >
        az network lb probe create
          --resource-group {{ rg }}
          --lb-name ocpMasterLB
          --name masterHealthProbe
          --protocol Tcp
          --port {{ api_port }}

    - name: Azure | Create private Master LB rule
      command: >
        az network lb rule create
          --resource-group {{ rg }}
          --lb-name ocpMasterLB
          --name ocpApiHealth
          --protocol Tcp
          --frontend-port {{ api_port }}
          --backend-port {{ api_port }}
          --frontend-ip-name masterApiFrontend
          --backend-pool-name masterAPIBackend
          --probe-name masterHealthProbe
          --load-distribution SourceIPProtocol
  when: master_lb_private_ip is defined

- name: Azure | Manage Router LB
  azure_rm_loadbalancer:
    name: ocpRouterLB
    location: "{{ location }}"
    resource_group: "{{ rg }}"
    frontend_ip_configurations:
      - name: routerFrontEnd
        public_ip_address: routerPublicIP
    backend_address_pools:
      - name: routerBackEnd
    probes:
      - name: routerHealthProbe
        port: 80
        protocol: Tcp
    load_balancing_rules:
      - name: routerRule
        frontend_ip_configuration: routerFrontEnd
        backend_address_pool: routerBackEnd
        probe: routerHealthProbe
        protocol: Tcp
        frontend_port: 80
        backend_port: 80
        load_distribution: SourceIPProtocol
      - name: httpsRouterRule
        frontend_ip_configuration: routerFrontEnd
        backend_address_pool: routerBackEnd
        probe: routerHealthProbe
        protocol: Tcp
        frontend_port: 443
        backend_port: 443
        load_distribution: SourceIPProtocol

# availablity Sets
- name: Azure | Manage Availability Sets
  azure_rm_availabilityset:
    name: "{{ item }}"
    state: "{{ state }}"
    location: "{{ location }}"
    resource_group: "{{ rg }}"
    platform_fault_domain_count: 2
    sku: Aligned
  loop:
    - "ocp-master-instances"
    - "ocp-infra-instances"
    - "ocp-app-instances"

# availablity Set for CNS Only
- name: Azure | Manage CNS Availability Set
  azure_rm_availabilityset:
    name: ocp-cns-instances
    state: "{{ state }}"
    location: "{{ location }}"
    resource_group: "{{ rg }}"
    platform_fault_domain_count: 2
    sku: Aligned
  when:
    - deploy_cns | default(true) | bool
    - not deploy_cns_on_infra | default(false) | bool

- name: Azure | Import azure_deploy_nic.yml
  include_tasks: azure_deploy_nic.yml

- name: Azure | Import azure_deploy_vnet_schedule_vm.yml
  include_tasks: azure_deploy_vnet_schedule_vm.yml

# Registry
- name: Azure | Manage Registry Storage Account
  azure_rm_storageaccount:
    resource_group: "{{ rg }}"
    name: "{{ registry_storage_account }}"
    state: "{{ state }}"
    location: "{{ location }}"
    account_type: Standard_LRS
- shell: az storage account keys list --account-name "{{ registry_storage_account }}" \
        --resource-group "{{ rg }}" --query "[?keyName == 'key1'].value" -o tsv
  register: key

- set_fact:
    registry_storage_account_key: "{{ key.stdout }}"

- name: Azure | template ansible hosts
  template:
    src: hosts.j2
    dest: hosts
    backup: yes

- name: remove ~/.ssh/config (WIP)
  file: path='~/.ssh/config' state=absent

- name: Azure | SSH config file exists
  stat:
    path: ~/.ssh/config
  register: sshconfig

- name: Azure | SSH config file exists with proper permissions
  file:
    state: touch
    path: ~/.ssh/config
    mode: 0600
  when: sshconfig.stat.exists == false

- name: Azure | update SSH proxy config
  blockinfile:
    create: yes
    path: ~/.ssh/config
    insertafter: EOF
    marker: "# {mark} {{ rg }} ANSIBLE MANAGED BLOCK "
    block: |
      Host bastion
        HostName     {{ rg_label }}b.{{ location }}.cloudapp.azure.com
        User         {{ admin_user }}
        IdentityFile {{ admin_privkey }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        LogLevel QUIET
      Host ocp*
        ProxyCommand    ssh {{ admin_user }}@bastion -W %h:%p
        IdentityFile {{ admin_privkey }}
        User         {{ admin_user }}
        StrictHostKeyChecking no
        UserKnownHostsFile /dev/null
        LogLevel QUIET

- name: Refresh inventory to ensure new instaces exist in inventory
  meta: refresh_inventory
